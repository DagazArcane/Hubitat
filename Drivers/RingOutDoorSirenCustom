/*
    Ring Outdoor Siren v2.1

    Copyright 2020 -> 2021 Hubitat Inc.  All Rights Reserved
    
    Currently can do:
    Siren
    Strobe
    Green Ring LED
    Logo LED
    Both Siren and Strobe
    Detects Battery / Mains
    Tamper Alerts

*/

import groovy.transform.Field
import groovy.json.JsonOutput

metadata {

    definition (name: "Ring Outdoor Siren (Custom)", namespace: "hubitat", author: "Dagaz") {
        capability "Actuator"
        capability "Alarm"
        capability "Configuration"
        capability "Battery"
        capability "TamperAlert"
		capability "PowerSource"
        
        
        command "LogoOn"
        command "LogoOff"
        command "GreenOn"
        command "GreenOff"
        
        attribute "logo", "STRING"
        attribute "green_led", "STRING"
        
    }

@Field static Map ZWAVE_NOTIFICATION_TYPES=[
        0:"Reserverd",
        1:"Smoke",
        2:"CO",
        3:"CO2",
        4:"Heat",
        5:"Water",
        6:"Access Control",
        7:"Home Security",
        8:"Power Management",
        9:"System",
        10:"Emergency",
        11:"Clock",
        12:"First"
]    
    preferences {
        configParams.each { input it.value.input }
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: true
        input name: "txtEnable", type: "bool", title: "Enable descriptionText logging", defaultValue: true
    }
}


// start and configure

void updated() {
    log.info "updated..."
    log.warn "debug logging is: ${logEnable == true}"
    log.warn "description logging is: ${txtEnable == true}"
    log.warn "encryption is: ${optEncrypt == true}"
    unschedule()
    if (logEnable) runIn(1800,logsOff)
    sendToDevice(runConfigs())
    updateEncryption()
}

void installed() {
    initializeVars()
}

void uninstalled() {

}

void initializeVars() {
    // first run only
    sendEvent(name:"logo", value: "off")
    sendEvent(name:"green_led", value: "off")
    sendEvent(name:"battery", value:100)
    sendEvent(name:"powersource", value:"battery")
    sendEvent(name:"alarm", value:"off")
    state.initialized=true
}


void configure() {
    if (logEnable) log.debug "configure()"
    if (!state.initialized) initializeVars()
    runIn(5,pollDeviceData)
}

void pollDeviceData() {
    List<String> cmds = []
    cmds.add(zwave.versionV3.versionGet().format())
    cmds.add(zwave.manufacturerSpecificV2.deviceSpecificGet(deviceIdType: 1).format())
    cmds.add(zwave.batteryV1.batteryGet().format())
    cmds.add(zwave.notificationV8.notificationGet(notificationType: 8, event: 0).format())
    cmds.add(zwave.notificationV8.notificationGet(notificationType: 7, event: 0).format())
    cmds.addAll(processAssociations())
    sendToDevice(cmds)
}

// logs

void logsOff(){
    log.warn "debug logging disabled..."
    device.updateSetting("logEnable", [value:"false", type:"bool"])
}


// Standard Buttons
void strobe() {
    if (logEnable) log.debug "strobe()"
    eventProcess(name:"alarm", value:"strobe")
    List<String> cmds=[]
	// sets the red LED flashing
    cmds.add(zwave.indicatorV3.indicatorSet(indicatorCount:1, value: 0, indicatorValues:[[indicatorId:0x0D, propertyId:1, value:0x64]]).format())
    sendToDevice(cmds)
}

void siren() {
    if (logEnable) log.debug "siren()"
    eventProcess(name:"alarm", value:"siren")
    List<String> cmds=[]
	//turns on the siren currently set to 1 volume
    cmds.add(zwave.indicatorV3.indicatorSet(indicatorCount:1, value: 0, indicatorValues:[[indicatorId:0x0D, propertyId:9, value:0x01]]).format())
    sendToDevice(cmds)
}

void both() {
    if (logEnable) log.debug "both()"
    eventProcess(name:"alarm", value:"both")
    List<String> cmds=[]
	// sets the red LED flashing and the siren on. then turns them off after 180 seconds
    cmds.add(zwave.indicatorV3.indicatorSet(indicatorCount:3, value: 0, indicatorValues:[[indicatorId:0x0D, propertyId:1, value:0x64],[indicatorId:0x0D, propertyId:9, value:0x01],[indicatorId:0x0D,propertyId:7,value:0xB4]]).format()) 
    sendToDevice(cmds)}

void off() {
    if (logEnable) log.debug "off()"
    eventProcess(name:"alarm", value:"off")
    List<String> cmds=[]
	//turns the red LED off and teh siren off
    cmds.add(zwave.indicatorV3.indicatorSet(indicatorCount:2, value: 0, indicatorValues:[[indicatorId:0x0D, propertyId:9, value:0x00], [indicatorId:0x0D, propertyId:1, value:0x00]]).format())
    sendToDevice(cmds)}

//additional buttons

def LogoOn() {
    if (logEnable) log.debug "LogoOn()"
    eventProcess(name:"logo", value:"on")
    List<String> cmds=[]
	//turns the ring LED Logo on
    cmds.add(zwave.indicatorV3.indicatorSet(indicatorCount:1, value: 0, indicatorValues:[[indicatorId:0x30, propertyId:1, value:0x64]]).format())  
    sendToDevice(cmds)
    sendEvent(name:"logo", value: "on", isStateChange:true)
}

def LogoOff() {
    if (logEnable) log.debug "LogoOff()"
    eventProcess(name:"logo", value:"off")
    List<String> cmds=[]
	//turns the ring LED logo off
    cmds.add(zwave.indicatorV3.indicatorSet(indicatorCount:1, value: 0, indicatorValues:[[indicatorId:0x30, propertyId:1, value:0x00]]).format())  
    sendToDevice(cmds)
    sendEvent(name:"logo", value: "off", isStateChange:true)
}

def GreenOn() {
    if (logEnable) log.debug "GreenOn()"
    eventProcess(name:"green_led", value:"on")
    List<String> cmds=[]
	//turns the green LED on
    cmds.add(zwave.indicatorV3.indicatorSet(indicatorCount:1, value: 0, indicatorValues:[[indicatorId:0x50, propertyId:1, value:0x64]]).format())
    sendToDevice(cmds)
    sendEvent(name:"green_led", value: "on", isStateChange:true)
}
def GreenOff() {
    if (logEnable) log.debug "GreenOff()"
    eventProcess(name:"green_led", value:"off")
    List<String> cmds=[]
	//turns the green LED off
    cmds.add(zwave.indicatorV3.indicatorSet(indicatorCount:1, value: 0, indicatorValues:[[indicatorId:0x50, propertyId:1, value:0x00]]).format())
    sendToDevice(cmds)
    sendEvent(name:"green_led", value: "off", isStateChange:true)    
}


//sends to device

void sendToDevice(List<String> cmds, Long delay=300) {
    sendHubCommand(new hubitat.device.HubMultiAction(commands(cmds, delay), hubitat.device.Protocol.ZWAVE))
}

void sendToDevice(String cmd, Long delay=300) {
    sendHubCommand(new hubitat.device.HubAction(zwaveSecureEncap(cmd), hubitat.device.Protocol.ZWAVE))
}



//get notifications and status e.g. tamper / mains


void zwaveEvent(hubitat.zwave.commands.notificationv8.NotificationReport cmd) {
    Map evt = [isStateChange:false]
    log.info "Notification: " + ZWAVE_NOTIFICATION_TYPES[cmd.notificationType]
    if (cmd.notificationType==4) {
        // heat alarm
        switch (cmd.event) {
            case 0:
                log.info "${device.dsiplayName} Heat Alarm: CLEARED"
                break
            case 2:
                log.warn "${device.DisplayName} Heat Alarm: OVERHEAT DETECTED"
                break
        }
    } else if (cmd.notificationType==5) {
        // Water Alarm
        evt.name="water"
        evt.isStateChange=true
        switch (cmd.event) {
            case 0:
                // state idle
                evt.value="dry"
                evt.descriptionText="${device.displayName} is ${evt.value}"
                break
            case 1:
                // water leak detected (location provided)
                evt.value="wet"
                evt.descriptionText="${device.displayName} is ${evt.value}"
                break
            case 2:
                // water leak detected
                evt.value="wet"
                evt.descriptionText="${device.displayName} is ${evt.value}"
                break
        }
    } else if (cmd.notificationType==6) {
        // access control
        switch (cmd.event) {
            case 0:
                // state idle
                break
            case 22:
                // Window / door is open
                evt.name="contact"
                evt.isStateChange=true
                evt.value="open"
                evt.descriptionText="${device.displayName} is ${evt.value}"
                break
            case 23:
                // Window / door is closed
                evt.name="contact"
                evt.isStateChange=true
                evt.value="closed"
                evt.descriptionText="${device.displayName} is ${evt.value}"
                break
        }
    } else if (cmd.notificationType==7) {
        // home security
        switch (cmd.event) {
            case 0:
                // state idle
                if (cmd.eventParametersLength>0) {
                    switch (cmd.eventParameter[0]) {
                        case 1:
                            evt.name="contact"
                            evt.value="closed"
                            evt.isStateChange=true
                            evt.descriptionText="${device.displayName} contact became ${evt.value}"
                            break
                        case 2:
                            evt.name="contact"
                            evt.value="closed"
                            evt.isStateChange=true
                            evt.descriptionText="${device.displayName} contact became ${evt.value}"
                            break
                        case 3:
                            evt.name="tamper"
                            evt.value="clear"
                            evt.isStateChange=true
                            evt.descriptionText="${device.displayName} tamper alert cover closed"
                            break
                        case 7:
                            evt.name="motion"
                            evt.value="inactive"
                            evt.isStateChange=true
                            evt.descriptionText="${device.displayName} motion became ${evt.value}"
                            break
                        case 8:
                            evt.name="motion"
                            evt.value="inactive"
                            evt.isStateChange=true
                            evt.descriptionText="${device.displayName} motion became ${evt.value}"
                            break
                    }
                } else {
                    // should probably do something here
                }
                break
            case 1:
                // Intrusion (location provided)
                evt.name="contact"
                evt.value="open"
                evt.isStateChange=true
                evt.descriptionText="${device.displayName} contact became ${evt.value}"
                break
            case 2:
                // Intrusion
                evt.name="contact"
                evt.value="open"
                evt.isStateChange=true
                evt.descriptionText="${device.displayName} contact became ${evt.value}"
                break
            case 3:
                // Tampering cover removed
                evt.name="tamper"
                evt.value="detected"
                evt.isStateChange=true
                evt.descriptionText="${device.displayName} tamper alert cover removed"
                break
            case 4:
                // Tampering, invalid code
                log.warn "Invalid code"
                break
            case 5:
                // glass breakage (location provided)
                break
            case 6:
                // glass breakage
                break
            case 7:
                // motion detected (location provided)
                evt.name="motion"
                evt.value="active"
                evt.isStateChange=true
                evt.descriptionText="${device.displayName} motion became ${evt.value}"
                break
            case 8:
                // motion detected
                evt.name="motion"
                evt.value="active"
                evt.isStateChange=true
                evt.descriptionText="${device.displayName} motion became ${evt.value}"
                break
            case 9:
                // tampering product removed
                break
            case 10:
                // impact detected
                break
            case 11:
                // magnetic field interference detected
                break
            case 254:
                // unknown event/state
                log.warn "Device sent unknown event / state notification"
                break
        }
    } else if (cmd.notificationType==8) {
        // power management
        switch (cmd.event) {
            case 0:
                // idle
                break
            case 1:
                // Power has been applied
                log.info "${device.displayName} Power has been applied"
                break
            case 2:
                // AC mains disconnected
                evt.name="powerSource"
                evt.isStateChange=true
                evt.value="battery"
                evt.descriptionText="${device.displayName} AC mains disconnected"
                break
            case 3:
                // AC mains re-connected
                evt.name="powerSource"
                evt.isStateChange=true
                evt.value="mains"
                evt.descriptionText="${device.displayName} AC mains re-connected"
                break
            case 4:
                // surge detected
                log.warn "${device.displayName} surge detected"
                break
            case 5:
                // voltage drop / drift
                break
            case 6:
                // Over-current detected
                break
            case 7:
                // Over-voltage detected
                break
            case 8:
                // over-load detected
                break
            case 9:
                // load error
                break
            case 10:
                // replace battery soon
                break
            case 11:
                // replace battery now
                break
            case 12:
                // battery is charging
                log.info "${device.displayName} Battery is charging"
                break
            case 13:
                // battery is fully charged
                break
            case 14:
                // charge battery soon
                break
            case 15:
                // charge battery now
                break
            case 16:
                // backup battery is low
                break
            case 17:
                // battery fluid is low
                break
            case 18:
                // backup battery disconnected
                break
            case 254:
                // unknown event / state
                break
        }
    }
    if (evt.isStateChange) {
        if (txtEnable) log.info evt.descriptionText
        eventProcess(evt)
    }
}



//need to decode

//lists

List<String> commands(List<String> cmds, Long delay=300) {
    return delayBetween(cmds.collect{ zwaveSecureEncap(it) }, delay)
}

List<String> runConfigs() {
    List<String> cmds = []
    configParams.each { param, data ->
        if (settings[data.input.name]) {
            cmds.addAll(configCmd(param, data.parameterSize, settings[data.input.name]))
        }
    }
    return cmds
}

List<String> pollConfigs() {
    List<String> cmds = []
    configParams.each { param, data ->
        if (settings[data.input.name]) {
            cmds.add(zwave.configurationV1.configurationGet(parameterNumber: param.toInteger()).format())
        }
    }
    return cmds
}

List<String> configCmd(parameterNumber, size, scaledConfigurationValue) {
    List<String> cmds = []
    cmds.add(zwave.configurationV1.configurationSet(parameterNumber: parameterNumber.toInteger(), size: size.toInteger(), scaledConfigurationValue: scaledConfigurationValue.toInteger()).format())
    cmds.add(zwave.configurationV1.configurationGet(parameterNumber: parameterNumber.toInteger()).format())
    return cmds
}

void zwaveEvent(hubitat.zwave.commands.configurationv1.ConfigurationReport cmd) {
    if(configParams[cmd.parameterNumber.toInteger()]) {
        Map configParam = configParams[cmd.parameterNumber.toInteger()]
        int scaledValue
        cmd.configurationValue.reverse().eachWithIndex { v, index ->
            scaledValue = scaledValue | v << (8 * index)
        }
        device.updateSetting(configParam.input.name, [value: "${scaledValue}", type: configParam.input.type])
    }
}

// Battery v1

void zwaveEvent(hubitat.zwave.commands.batteryv1.BatteryReport cmd) {
    Map evt = [name: "battery", unit: "%"]
    if (cmd.batteryLevel == 0xFF) {
        evt.descriptionText = "${device.displayName} has a low battery"
        evt.value = 1
    } else {
        evt.value = cmd.batteryLevel
        evt.descriptionText = "${device.displayName} battery is ${evt.value}${evt.unit}"
    }
    evt.isStateChange = true
    if (txtEnable && evt.descriptionText) log.info evt.descriptionText
    sendEvent(evt)
}

// MSP V2

void zwaveEvent(hubitat.zwave.commands.manufacturerspecificv2.DeviceSpecificReport cmd) {
    if (logEnable) log.debug "Device Specific Report - DeviceIdType: ${cmd.deviceIdType}, DeviceIdFormat: ${cmd.deviceIdDataFormat}, Data: ${cmd.deviceIdData}"
    if (cmd.deviceIdType == 1) {
        String serialNumber = ""
        if (cmd.deviceIdDataFormat == 1) {
            cmd.deviceIdData.each { serialNumber += hubitat.helper.HexUtils.integerToHexString(it & 0xff,1).padLeft(2, '0')}
        } else {
            cmd.deviceIdData.each { serialNumber += (char) it }
        }
        device.updateDataValue("serialNumber", serialNumber)
    }
}

// Version V2

void zwaveEvent(hubitat.zwave.commands.versionv3.VersionReport cmd) {
    Double firmware0Version = cmd.firmware0Version + (cmd.firmware0SubVersion / 100)
    Double protocolVersion = cmd.zWaveProtocolVersion + (cmd.zWaveProtocolSubVersion / 100)
    if (logEnable) log.debug "Version Report - FirmwareVersion: ${firmware0Version}, ProtocolVersion: ${protocolVersion}, HardwareVersion: ${cmd.hardwareVersion}"
    device.updateDataValue("firmwareVersion", "${firmware0Version}")
    device.updateDataValue("protocolVersion", "${protocolVersion}")
    device.updateDataValue("hardwareVersion", "${cmd.hardwareVersion}")
    if (cmd.firmwareTargets > 0) {
        cmd.targetVersions.each { target ->
            Double targetVersion = target.version + (target.subVersion / 100)
            device.updateDataValue("firmware${target.target}Version", "${targetVersion}")
        }
    }
}

// Association V2

List<String> setDefaultAssociation() {
    List<String> cmds = []
    cmds.add(zwave.associationV2.associationSet(groupingIdentifier: 1, nodeId: zwaveHubNodeId).format())
    cmds.add(zwave.associationV2.associationGet(groupingIdentifier: 1).format())
    return cmds
}

List<String> processAssociations(){
    List<String> cmds = []
    cmds.addAll(setDefaultAssociation())
    return cmds
}

void zwaveEvent(hubitat.zwave.commands.associationv2.AssociationReport cmd) {
    List<String> temp = []
    if (cmd.nodeId != []) {
        cmd.nodeId.each {
            temp.add(it.toString().format( '%02x', it.toInteger() ).toUpperCase())
        }
    }
    if (logEnable) log.debug "Association Report - Group: ${cmd.groupingIdentifier}, Nodes: $temp"
}

// event filter

void eventProcess(Map evt) {
    if (txtEnable && evt.descriptionText) log.info evt.descriptionText
    if (device.currentValue(evt.name).toString() != evt.value.toString()) {
        sendEvent(evt)
    }
}

// universal

void zwaveEvent(hubitat.zwave.Command cmd) {
    if (logEnable) log.debug "skip:${cmd}"
}

void zwaveEvent(hubitat.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
    hubitat.zwave.Command encapsulatedCommand = cmd.encapsulatedCommand(CMD_CLASS_VERS)
    if (encapsulatedCommand) {
        zwaveEvent(encapsulatedCommand)
    }
}

void zwaveEvent(hubitat.zwave.commands.supervisionv1.SupervisionGet cmd) {
    if (logEnable) log.debug "Supervision Get - SessionID: ${cmd.sessionID}, CC: ${cmd.commandClassIdentifier}, Command: ${cmd.commandIdentifier}"
    if (cmd.commandClassIdentifier == 0x6F) {
        parseEntryControl(cmd.commandIdentifier, cmd.commandByte)
    } else {
        hubitat.zwave.Command encapsulatedCommand = cmd.encapsulatedCommand(CMD_CLASS_VERS)
        if (encapsulatedCommand) {
            zwaveEvent(encapsulatedCommand)
        }
    }
    // device quirk requires this to be unsecure reply
    sendToDevice(zwave.supervisionV1.supervisionReport(sessionID: cmd.sessionID, reserved: 0, moreStatusUpdates: false, status: 0xFF, duration: 0).format())
    //sendHubCommand(new hubitat.device.HubAction(zwave.supervisionV1.supervisionReport(sessionID: cmd.sessionID, reserved: 0, moreStatusUpdates: false, status: 0xFF, duration: 0).format(), hubitat.device.Protocol.ZWAVE))
}

void parse(String description) {
    if (logEnable) log.debug "parse:${description}"
    hubitat.zwave.Command cmd = zwave.parse(description, CMD_CLASS_VERS)
    if (cmd) {
        zwaveEvent(cmd)
    }
}
